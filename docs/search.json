[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PRIOilandGas",
    "section": "",
    "text": "I will upload my project from Data2Policy here.\nHopefully this helps me get a highly paid position in a very fun career field.\n\n\n-Proficient in programs R, Python, and Microsoft Office Suite.\n-Fully capable of preforming independent research (see below [where I will fill in more of project])\n-Able to be trained with quick turn around to train others to same high level standard\n\n\n\n-College courses for Mathematics were focused on statistics, regression, and applied programming\n-College courses for Economics were focused on econometrics, and macro.\n-Research developed while at the university was a combination of above."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Line Added 11/13/2023\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "hoobies.html",
    "href": "hoobies.html",
    "title": "Hobbies",
    "section": "",
    "text": "I like to snowboard, play with my dogs, and read."
  },
  {
    "objectID": "hoobies.html#in",
    "href": "hoobies.html#in",
    "title": "Political Risk Insurance for Canadian Oil and Gas Companies",
    "section": "In",
    "text": "In"
  },
  {
    "objectID": "hoobies.html#introduction",
    "href": "hoobies.html#introduction",
    "title": "PRI Canadian O&G",
    "section": "Introduction",
    "text": "Introduction"
  },
  {
    "objectID": "PRI.html",
    "href": "PRI.html",
    "title": "PRI Canadian O&G",
    "section": "",
    "text": "Code\nY &lt;- c(ay98, ay99, ay00, ay01, ay02, ay03, ay04, ay05, ay06, ay07, ay08, ay09, ay10,\n       ay11, ay12, ay13, ay14, ay15, ay16, ay17, ay18, ay19, ay20, ay21)\nX &lt;- c(1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,\n       2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021)\nregall &lt;- lm(Y ~ X - 1)\nsummary(regall)\n\n\n\nCall:\nlm(formula = Y ~ X - 1)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-1.317e+10 -6.101e+09 -9.271e+08  4.925e+09  1.814e+10 \n\nCoefficients:\n  Estimate Std. Error t value Pr(&gt;|t|)    \nX  7658514     856057   8.946 5.98e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.427e+09 on 23 degrees of freedom\nMultiple R-squared:  0.7768,    Adjusted R-squared:  0.7671 \nF-statistic: 80.04 on 1 and 23 DF,  p-value: 5.982e-09\n\n\nCode\nplot(Y ~ X - 1)\nabline(regall, col = \"blue\")\n0%         25%         50%         75%        100% \n    6202000   107093500   632554000  2139100000 11122000000 \n\n\n         0%         25%         50%         75%        100% \n  175309550  1089975255  2226164000  4395065000 22235690000 \n\n\n         0%         25%         50%         75%        100% \n  507370000  5290501800 10277350000 13105740000 38514920000 \n\n\n         0%         25%         50%         75%        100% \n  671600000  9954844500 20411500000 23796500000 49010000000 \n\n\n         0%         25%         50%         75%        100% \n   56363340  1834950578 28238550000 47232915000 74038800000 \n\n\n         0%         25%         50%         75%        100% \n    4353880   375289860  6992851040 22677200000 58035120000 \n\n\n         0%         25%         50%         75%        100% \n    9938807   282860570  5106080000 14789960000 37879180000 \n\n\n         0%         25%         50%         75%        100% \n     144000   351478800  4427627200 23556000000 51481600000 \n\n\n          0%          25%          50%          75%         100% \n   146673668   1200914000   5198732600  45515800000 158000000000\nCode\npre_amt99q1 &lt;- quantile(y98, .25)\npre_amt99q2 &lt;- quantile(y98, .50)\npre_amt99q3 &lt;- quantile(y98, .75)\nreal1999q1 &lt;- quantile(y99, .25)\nreal1999q2 &lt;- quantile(y99, .50)\nreal1999q3 &lt;- quantile(y99, .75)\n\npre_amt02q1 &lt;- quantile(y01, .25)\npre_amt02q2 &lt;- quantile(y01, .50)\npre_amt02q3 &lt;- quantile(y01, .75)\nreal2002q1 &lt;- quantile(y02, .25)\nreal2002q2 &lt;- quantile(y02, .50)\nreal2002q3 &lt;- quantile(y02, .75)\n\npre_amt06q1 &lt;- quantile(y05, .25)\npre_amt06q2 &lt;- quantile(y05, .50)\npre_amt06q3 &lt;- quantile(y05, .75)\nreal2006q1 &lt;- quantile(y06, .25)\nreal2006q2 &lt;- quantile(y06, .50)\nreal2006q3 &lt;- quantile(y06, .75)\n\npre_amt08q1 &lt;- quantile(y07, .25)\npre_amt08q2 &lt;- quantile(y07, .50)\npre_amt08q3 &lt;- quantile(y07, .75)\nreal2008q1 &lt;- quantile(y08, .25)\nreal2008q2 &lt;- quantile(y08, .50)\nreal2008q3 &lt;- quantile(y08, .75)\n\npre_amt10q1 &lt;- quantile(y09, .25)\npre_amt10q2 &lt;- quantile(y09, .50)\npre_amt10q3 &lt;- quantile(y09, .75)\nreal2010q1 &lt;- quantile(y10, .25)\nreal2010q2 &lt;- quantile(y10, .50)\nreal2010q3 &lt;- quantile(y10, .75)\n\npre_amt13q1 &lt;- quantile(y12, .25)\npre_amt13q2 &lt;- quantile(y12, .50)\npre_amt13q3 &lt;- quantile(y12, .75)\nreal2013q1 &lt;- quantile(y13, .25)\nreal2013q2 &lt;- quantile(y13, .50)\nreal2013q3 &lt;- quantile(y13, .75)\n\npre_amt17q1 &lt;- quantile(y16, .25)\npre_amt17q2 &lt;- quantile(y16, .50)\npre_amt17q3 &lt;- quantile(y16, .75)\nreal2017q1 &lt;- quantile(y17, .25)\nreal2017q2 &lt;- quantile(y17, .50)\nreal2017q3 &lt;- quantile(y17, .75)\n\npre_amt21q1 &lt;- quantile(y20, .25)\npre_amt21q2 &lt;- quantile(y20, .50)\npre_amt21q3 &lt;- quantile(y20, .75)\nreal2021q1 &lt;- quantile(y21, .25)\nreal2021q2 &lt;- quantile(y21, .50)\nreal2021q3 &lt;- quantile(y21, .75)\nCode\npre_amt08q2\n\n\n        50% \n24910670000 \n\n\nCode\nreal2008q2\n\n\n        50% \n28238550000\nTHIS LOOP When you see Growth Cycle, it really is Business Cycle.\nCode\n#LOOP\nnIter=10000\nresults99q1=matrix(nrow=nIter,ncol=8)\ncolnames(results99q1)=c('Election','Pre_Amtq1','Winnerq1', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults99q2=matrix(nrow=nIter,ncol=8)\ncolnames(results99q2)=c('Election','Pre_Amtq2','Winnerq2', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults99q3=matrix(nrow=nIter,ncol=8)\ncolnames(results99q3)=c('Election','Pre_Amtq3','Winnerq3', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\nresults02q1=matrix(nrow=nIter,ncol=8)\ncolnames(results02q1)=c('Election','Pre_Amtq1','Winner', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults02q2=matrix(nrow=nIter,ncol=8)\ncolnames(results02q2)=c('Election','Pre_Amtq2','Winner', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults02q3=matrix(nrow=nIter,ncol=8)\ncolnames(results02q3)=c('Election','Pre_Amtq3','Winner', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\nresults06q1=matrix(nrow=nIter,ncol=8)\ncolnames(results06q1)=c('Election','Pre_Amtq1','Winner', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults06q2=matrix(nrow=nIter,ncol=8)\ncolnames(results06q2)=c('Election','Pre_Amtq2','Winner', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults06q3=matrix(nrow=nIter,ncol=8)\ncolnames(results06q3)=c('Election','Pre_Amtq3','Winner', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\nresults08q1=matrix(nrow=nIter,ncol=8)\ncolnames(results08q1)=c('Election','Pre_Amtq1','Winner', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults08q2=matrix(nrow=nIter,ncol=8)\ncolnames(results08q2)=c('Election','Pre_Amtq2','Winner', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults08q3=matrix(nrow=nIter,ncol=8)\ncolnames(results08q3)=c('Election','Pre_Amtq3','Winner', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\nresults10q1=matrix(nrow=nIter,ncol=8)\ncolnames(results10q1)=c('Election','Pre_Amtq1','Winner', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults10q2=matrix(nrow=nIter,ncol=8)\ncolnames(results10q2)=c('Election','Pre_Amtq2','Winner', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults10q3=matrix(nrow=nIter,ncol=8)\ncolnames(results10q3)=c('Election','Pre_Amtq3','Winner', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\nresults13q1=matrix(nrow=nIter,ncol=8)\ncolnames(results13q1)=c('Election','Pre_Amtq1','Winner', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults13q2=matrix(nrow=nIter,ncol=8)\ncolnames(results13q2)=c('Election','Pre_Amtq2','Winner', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults13q3=matrix(nrow=nIter,ncol=8)\ncolnames(results13q3)=c('Election','Pre_Amtq3','Winner', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\nresults17q1=matrix(nrow=nIter,ncol=8)\ncolnames(results17q1)=c('Election','Pre_Amtq1','Winner', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults17q2=matrix(nrow=nIter,ncol=8)\ncolnames(results17q2)=c('Election','Pre_Amtq2','Winner', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults17q3=matrix(nrow=nIter,ncol=8)\ncolnames(results17q3)=c('Election','Pre_Amtq3','Winner', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\nresults21q1=matrix(nrow=nIter,ncol=8)\ncolnames(results21q1)=c('Election','Pre_Amtq1','Winner', 'Growth_Cycleq1', 'Post_Amtq1', 'Real_Amtq1', 'Insuranceq1', 'Coveredq1')\nresults21q2=matrix(nrow=nIter,ncol=8)\ncolnames(results21q2)=c('Election','Pre_Amtq2','Winner', 'Growth_Cycleq2', 'Post_Amtq2', 'Real_Amtq2', 'Insuranceq2', 'Coveredq2')\nresults21q3=matrix(nrow=nIter,ncol=8)\ncolnames(results21q3)=c('Election','Pre_Amtq3','Winner', 'Growth_Cycleq3', 'Post_Amtq3', 'Real_Amtq3', 'Insuranceq3', 'Coveredq3')\n\nfor(i in 1:nIter){\nset.seed(i)\nintial_amt=2490842340  #&lt;- Amount as of end of 1997\n####!!!!!!!!!!!!!!!!!!!!!!\nexp_rate=1.021\ncont_rate=1.016\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\n# Election 1 1998 outcomes\nelection98_outcomes=c('lib','cons')\nelection98=sample(election98_outcomes,1,prob=c(.53,.47))\n\n#Growth Cycle 1999\ngrowthcycle99_outcomes=c('expansion','contraction')\nif(election98=='lib'){growthcycle99=sample(growthcycle99_outcomes,1,prob=c(.99, .01))}\nif(election98=='cons'){growthcycle99=sample(growthcycle99_outcomes,1,prob=c(.67, .33))}\n\nif(growthcycle99=='expansion'){post_amt99q1=pre_amt99q1*exp_rate_noise}\nif(growthcycle99=='contraction'){post_amt99q1=pre_amt99q1*cont_rate_noise}\n\ninsurance99q1=ifelse(growthcycle99=='expansion',0.60*post_amt99q1,0.90*post_amt99q1)\ncovered99q1 &lt;- insurance99q1/real1999q1 #insurance as a percent of what the actual was and how much is helped.\nresults99q1[i,]=c('1999q1', pre_amt99q1, election98, growthcycle99, post_amt99q1, real1999q1, insurance99q1, covered99q1)\n\nif(growthcycle99=='expansion'){post_amt99q2=pre_amt99q2*exp_rate_noise}\nif(growthcycle99=='contraction'){post_amt99q2=pre_amt99q2*cont_rate_noise}\n\ninsurance99q2=ifelse(growthcycle99=='expansion',0.60*post_amt99q2,0.90*post_amt99q2)\ncovered99q2 &lt;- insurance99q2/real1999q2 #insurance as a percent of what the actual was and how much is helped.\nresults99q2[i,]=c('1999q2', pre_amt99q2, election98, growthcycle99, post_amt99q2, real1999q2, insurance99q2, covered99q2)\n\n\nif(growthcycle99=='expansion'){post_amt99q3=pre_amt99q3*exp_rate_noise}\nif(growthcycle99=='contraction'){post_amt99q3=pre_amt99q3*cont_rate_noise}\n\ninsurance99q3=ifelse(growthcycle99=='expansion',0.60*post_amt99q3,0.90*post_amt99q3)\ncovered99q3 &lt;- insurance99q3/real1999q3 #insurance as a percent of what the actual was and how much is helped.\nresults99q3[i,]=c('1999q3', pre_amt99q3, election98, growthcycle99, post_amt99q3, real1999q3, insurance99q3, covered99q3)\n\n\n#Growth Cycle 2000\ngrowthcycle00_outcomes=c('expansion','contraction')\nif(growthcycle99=='expansion'){growthcycle00=sample(growthcycle00_outcomes,1,prob=c(.71,.29))}\nif(growthcycle99=='contraction'){growthcycle00=sample(growthcycle00_outcomes,1,prob=c(.99, .01))}\n\n# Election 2 2001\nelection01_outcomes=c('lib','cons')\nif(growthcycle00=='expansion'){election01=sample(election01_outcomes,1,prob=c(.75, .25))}\nif(growthcycle00=='contraction'){election01=sample(election01_outcomes,1,prob=c(.67, .33))}\n\n\n#Growth Cycle 2002\ngrowthcycle02_outcomes=c('expansion','contraction')\nif(election01=='lib'){growthcycle02=sample(growthcycle02_outcomes,1,prob=c(.99, .01))}\nif(election01=='cons'){growthcycle02=sample(growthcycle02_outcomes,1,prob=c(.67, .33))}\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\nif(growthcycle02=='expansion'){post_amt02q1=pre_amt02q1*exp_rate_noise}\nif(growthcycle02=='contraction'){post_amt02q1=pre_amt02q1*cont_rate_noise}\n\ninsurance02q1=ifelse(growthcycle02=='expansion',0.60*post_amt02q1,0.90*post_amt02q1)\ncovered02q1 &lt;- insurance02q1/real2002q1 #insurance as a percent of what the actual was\nresults02q1[i,]=c('2002q1',pre_amt02q1,election01, growthcycle02,post_amt02q1,real2002q1, insurance02q1, covered02q1)\n\n\nif(growthcycle02=='expansion'){post_amt02q2=pre_amt02q2*exp_rate_noise}\nif(growthcycle02=='contraction'){post_amt02q2=pre_amt02q2*cont_rate_noise}\n\ninsurance02q2=ifelse(growthcycle02=='expansion',0.60*post_amt02q2,0.90*post_amt02q2)\ncovered02q2 &lt;- insurance02q2/real2002q2 #insurance as a percent of what the actual was\nresults02q2[i,]=c('2002q2',pre_amt02q2,election01, growthcycle02,post_amt02q2,real2002q2, insurance02q2, covered02q2)\n\nif(growthcycle02=='expansion'){post_amt02q3=pre_amt02q3*exp_rate_noise}\nif(growthcycle02=='contraction'){post_amt02q3=pre_amt02q3*cont_rate_noise}\n\ninsurance02q3=ifelse(growthcycle02=='expansion',0.60*post_amt02q3,0.90*post_amt02q3)\ncovered02q3 &lt;- insurance02q3/real2002q3 #insurance as a percent of what the actual was\nresults02q3[i,]=c('2002q3',pre_amt02q3,election01, growthcycle02,post_amt02q3,real2002q3, insurance02q3, covered02q3)\n\n#Growth Cycle 2003\ngrowthcycle03_outcomes=c('expansion','contraction')\nif(growthcycle02=='expansion'){growthcycle03=sample(growthcycle03_outcomes,1,prob=c(.71, .29))}\nif(growthcycle02=='contraction'){growthcycle03=sample(growthcycle03_outcomes,1,prob=c(.99, .01))}\n\n#Growth Cycle 2004\ngrowthcycle04_outcomes=c('expansion','contraction')\nif(growthcycle03=='expansion'){growthcycle04=sample(growthcycle04_outcomes,1,prob=c(.71, .29))}\nif(growthcycle03=='contraction'){growthcycle04=sample(growthcycle04_outcomes,1,prob=c(.99, .01))}\n\n#Election 3 2005\nelection05_outcomes=c('lib','cons')\nif(growthcycle04=='expansion'){election05=sample(election05_outcomes,1,prob=c(.75, .25))}\nif(growthcycle04=='contraction'){election05=sample(election05_outcomes,1,prob=c(.67, .33))}\n\npre_amt06=20420510500  #&lt;- ENTER REAL PRE 2006\n#Growth Cycle 2006\ngrowthcycle06_outcomes=c('expansion','contraction')\nif(election05=='lib'){growthcycle06=sample(growthcycle06_outcomes,1,prob=c(.99, .01))}\nif(election05=='cons'){growthcycle06=sample(growthcycle06_outcomes,1,prob=c(.67, .33))}\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\nif(growthcycle06=='expansion'){post_amt06q1=pre_amt06q1*exp_rate_noise}\nif(growthcycle06=='contraction'){post_amt06q1=pre_amt06q1*cont_rate_noise}\n\ninsurance06q1=ifelse(growthcycle06=='expansion',0.60*post_amt06q1,0.90*post_amt06q1)\ncovered06q1 &lt;- insurance06q1/real2006q1\nresults06q1[i,]=c('2006q1',pre_amt06q1,election05, growthcycle06, post_amt06q1, real2006q1, insurance06q1, covered06q1)\n\nif(growthcycle06=='expansion'){post_amt06q2=pre_amt06q2*exp_rate_noise}\nif(growthcycle06=='contraction'){post_amt06q2=pre_amt06q2*cont_rate_noise}\n\ninsurance06q2=ifelse(growthcycle06=='expansion',0.60*post_amt06q2,0.90*post_amt06q2)\ncovered06q2 &lt;- insurance06q2/real2006q2\nresults06q2[i,]=c('2006q1',pre_amt06q2,election05, growthcycle06, post_amt06q2, real2006q2, insurance06q2, covered06q2)\n\nif(growthcycle06=='expansion'){post_amt06q3=pre_amt06q3*exp_rate_noise}\nif(growthcycle06=='contraction'){post_amt06q3=pre_amt06q3*cont_rate_noise}\n\ninsurance06q3=ifelse(growthcycle06=='expansion',0.60*post_amt06q3,0.90*post_amt06q3)\ncovered06q3 &lt;- insurance06q2/real2006q2\nresults06q3[i,]=c('2006q3',pre_amt06q3,election05, growthcycle06, post_amt06q3, real2006q3, insurance06q3, covered06q3)\n\n#Election 4 2007\nelection07_outcomes=c('lib','cons')\nif(growthcycle06=='expansion'){election07=sample(election07_outcomes,1,prob=c(.75, .25))}\nif(growthcycle06=='contraction'){election07=sample(election07_outcomes,1,prob=c(.67, .33))}\n\n#Growth Cycle 2008\ngrowthcycle08_outcomes=c('expansion','contraction')\nif(election07=='lib'){growthcycle08=sample(growthcycle08_outcomes,1,prob=c(.99, .01))}\nif(election07=='cons'){growthcycle08=sample(growthcycle08_outcomes,1,prob=c(.67, .33))}\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\nif(growthcycle08=='expansion'){post_amt08q1=pre_amt08q1*exp_rate_noise}\nif(growthcycle08=='contraction'){post_amt08q1=pre_amt08q1*cont_rate_noise}\n\ninsurance08q1=ifelse(growthcycle08=='expansion',0.60*post_amt08q1,0.90*post_amt08q1)\ncovered08q1 &lt;- insurance08q1/real2008q1\nresults08q1[i,]=c('2008q1',pre_amt08q1,election07, growthcycle08,post_amt08q1,real2008q1, insurance08q1, covered08q1)\n\nif(growthcycle08=='expansion'){post_amt08q2=pre_amt08q2*exp_rate_noise}\nif(growthcycle08=='contraction'){post_amt08q2=pre_amt08q2*cont_rate_noise}\ninsurance08q2=ifelse(growthcycle08=='expansion',0.95*post_amt08q2,0.90*post_amt08q2)\ncovered08q2 &lt;- insurance08q2/real2008q2\nresults08q2[i,]=c('2008q2',pre_amt08q2,election07, growthcycle08,post_amt08q2,real2008q2, insurance08q2, covered08q2)\n\nif(growthcycle08=='expansion'){post_amt08q3=pre_amt08q3*exp_rate_noise}\nif(growthcycle08=='contraction'){post_amt08q3=pre_amt08q3*cont_rate_noise}\n\ninsurance08q3=ifelse(growthcycle08=='expansion',0.60*post_amt08q3,0.90*post_amt08q3)\ncovered08q3 &lt;- insurance08q3/real2008q3\nresults08q3[i,]=c('2008q3',pre_amt08q3,election07, growthcycle08,post_amt08q3,real2008q3, insurance08q3, covered08q3)\n\n#Election 5 2009\nelection09_outcomes=c('lib','cons')\nif(growthcycle08=='expansion'){election09=sample(election09_outcomes,1,prob=c(.75, .25))}\nif(growthcycle08=='contraction'){election09=sample(election09_outcomes,1,prob=c(.67, .33))}\n\n#Growth Cycle 2010\ngrowthcycle10_outcomes=c('expansion','contraction')\nif(election09=='lib'){growthcycle10=sample(growthcycle10_outcomes,1,prob=c(.99, .01))}\nif(election09=='cons'){growthcycle10=sample(growthcycle10_outcomes,1,prob=c(.67, .33))}\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\nif(growthcycle10=='expansion'){post_amt10q1=pre_amt10q1*exp_rate_noise}\nif(growthcycle10=='contraction'){post_amt10q1=pre_amt10q1*cont_rate_noise}\n\ninsurance10q1=ifelse(growthcycle10=='expansion',0.60*post_amt10q1,0.90*post_amt10q1)\ncovered10q1 &lt;- insurance10q1/real2010q1\nresults10q1[i,]=c('2010q1',pre_amt10q1,election09, growthcycle10,post_amt10q1,real2010q1, insurance10q1, covered10q1)\n\nif(growthcycle10=='expansion'){post_amt10q2=pre_amt10q2*exp_rate_noise}\nif(growthcycle10=='contraction'){post_amt10q2=pre_amt10q2*cont_rate_noise}\n\ninsurance10q2=ifelse(growthcycle10=='expansion',0.60*post_amt10q2,0.90*post_amt10q2)\ncovered10q2 &lt;- insurance10q2/real2010q2\nresults10q2[i,]=c('2010q2',pre_amt10q2,election09, growthcycle10,post_amt10q2,real2010q2, insurance10q2, covered10q2)\n\nif(growthcycle10=='expansion'){post_amt10q3=pre_amt10q3*exp_rate_noise}\nif(growthcycle10=='contraction'){post_amt10q3=pre_amt10q3*cont_rate_noise}\n\ninsurance10q3=ifelse(growthcycle10=='expansion',0.60*post_amt10q3,0.90*post_amt10q3)\ncovered10q3 &lt;- insurance10q3/real2010q3\nresults10q3[i,]=c('2010q2',pre_amt10q3,election09, growthcycle10,post_amt10q3,real2010q3, insurance10q3, covered10q3)\n\n#Growth Cycle 2011\ngrowthcycle11_outcomes=c('expansion','contraction')\nif(growthcycle10=='expansion'){growthcycle11=sample(growthcycle11_outcomes,1,prob=c(.71, .29))}\nif(growthcycle10=='contraction'){growthcycle11=sample(growthcycle11_outcomes,1,prob=c(.99, .01))}\n\n#Election 6 2012\nelection12_outcomes=c('lib','cons')\nif(growthcycle11=='expansion'){election12=sample(election12_outcomes,1,prob=c(.75, .25))}\nif(growthcycle11=='contraction'){election12=sample(election12_outcomes,1,prob=c(.67, .33))}\n\npre_amt13=5209648000 #&lt;- ENTER REAL PRE 2013\n#Growth Cycle 2013\ngrowthcycle13_outcomes=c('expansion','contraction')\nif(election12=='lib'){growthcycle13=sample(growthcycle13_outcomes,1,prob=c(.99, .01))}\nif(election12=='cons'){growthcycle13=sample(growthcycle13_outcomes,1,prob=c(.67, .33))}\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\nif(growthcycle13=='expansion'){post_amt13q1=pre_amt13q1*exp_rate_noise}\nif(growthcycle13=='contraction'){post_amt13q1=pre_amt13q1*cont_rate_noise}\n\ninsurance13q1=ifelse(growthcycle13=='expansion',0.60*post_amt13q1,0.90*post_amt13q1)\ncovered13q1 &lt;- insurance13q1/real2013q1\nresults13q1[i,]=c('2013',pre_amt13q1,election12, growthcycle13,post_amt13q1,real2013q1, insurance13q1, covered13q1)\n\nif(growthcycle13=='expansion'){post_amt13q2=pre_amt13q2*exp_rate_noise}\nif(growthcycle13=='contraction'){post_amt13q2=pre_amt13q2*cont_rate_noise}\n\ninsurance13q2=ifelse(growthcycle13=='expansion',0.60*post_amt13q2,0.90*post_amt13q2)\ncovered13q2 &lt;- insurance13q2/real2013q2\nresults13q2[i,]=c('2013',pre_amt13q2,election12, growthcycle13,post_amt13q2,real2013q2, insurance13q2, covered13q2)\n\nif(growthcycle13=='expansion'){post_amt13q3=pre_amt13q3*exp_rate_noise}\nif(growthcycle13=='contraction'){post_amt13q3=pre_amt13q3*cont_rate_noise}\n\ninsurance13q3=ifelse(growthcycle13=='expansion',0.60*post_amt13q3,0.90*post_amt13q3)\ncovered13q3 &lt;- insurance13q3/real2013q3\nresults13q3[i,]=c('2013',pre_amt13q3,election12, growthcycle13,post_amt13q3,real2013q3, insurance13q3, covered13q3)\n\n#Growth Cycle 2014\ngrowthcycle14_outcomes=c('expansion','contraction')\nif(growthcycle13=='expansion'){growthcycle14=sample(growthcycle14_outcomes,1,prob=c(.71, .29))}\nif(growthcycle13=='contraction'){growthcycle14=sample(growthcycle14_outcomes,1,prob=c(.99, .01))}\n\n#Growth Cycle 2015\ngrowthcycle15_outcomes=c('expansion','contraction')\nif(growthcycle14=='expansion'){growthcycle15=sample(growthcycle15_outcomes,1,prob=c(.71, .29))}\nif(growthcycle14=='contraction'){growthcycle15=sample(growthcycle15_outcomes,1,prob=c(.99, .01))}\n\n#Election 7 2016\nelection16_outcomes=c('lib','cons')\nif(growthcycle15=='expansion'){election16=sample(election16_outcomes,1,prob=c(.75,.25))}\nif(growthcycle15=='contraction'){election16=sample(election16_outcomes,1,prob=c(.67, .33))}\n\npre_amt17=4172740000 #&lt;- ENTER REAL PRE 2017\n#Growth Cycle 2017\ngrowthcycle17_outcomes=c('expansion','contraction')\nif(election16=='lib'){growthcycle17=sample(growthcycle17_outcomes,1,prob=c(.99, .01))}\nif(election16=='cons'){growthcycle17=sample(growthcycle17_outcomes,1,prob=c(.67, .33))}\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\nif(growthcycle17=='expansion'){post_amt17q1=pre_amt17q1*exp_rate_noise}\nif(growthcycle17=='contraction'){post_amt17q1=pre_amt17q1*cont_rate_noise}\n\ninsurance17q1=ifelse(growthcycle17=='expansion',0.60*post_amt17q1,0.90*post_amt17q1)\ncovered17q1 &lt;- insurance17q1/real2017q1\nresults17q1[i,]=c('2017',pre_amt17q1,election16, growthcycle17, post_amt17q1, real2017q1, insurance17q1, covered17q1)\n\nif(growthcycle17=='expansion'){post_amt17q2=pre_amt17q2*exp_rate_noise}\nif(growthcycle17=='contraction'){post_amt17q2=pre_amt17q2*cont_rate_noise}\n\ninsurance17q2=ifelse(growthcycle17=='expansion',0.60*post_amt17q2,0.90*post_amt17q2)\ncovered17q2 &lt;- insurance17q2/real2017q2\nresults17q2[i,]=c('2017',pre_amt17q2,election16, growthcycle17, post_amt17q2, real2017q2, insurance17q2, covered17q2)\n\nif(growthcycle17=='expansion'){post_amt17q3=pre_amt17q3*exp_rate_noise}\nif(growthcycle17=='contraction'){post_amt17q3=pre_amt17q3*cont_rate_noise}\n\ninsurance17q3=ifelse(growthcycle17=='expansion',0.60*post_amt17q3,0.90*post_amt17q3)\ncovered17q3 &lt;- insurance17q3/real2017q3\nresults17q3[i,]=c('2017',pre_amt17q3,election16, growthcycle17, post_amt17q3, real2017q3, insurance17q3, covered17q3)\n\n#Growth Cycle 2018\ngrowthcycle18_outcomes=c('expansion','contraction')\nif(growthcycle17=='expansion'){growthcycle18=sample(growthcycle18_outcomes,1,prob=c(.71, .29))}\nif(growthcycle17=='contraction'){growthcycle18=sample(growthcycle18_outcomes,1,prob=c(.99, .01))}\n\n#Growth Cycle 2019\ngrowthcycle19_outcomes=c('expansion','contraction')\nif(growthcycle18=='expansion'){growthcycle19=sample(growthcycle19_outcomes,1,prob=c(.71, .29))}\nif(growthcycle18=='contraction'){growthcycle19=sample(growthcycle19_outcomes,1,prob=c(.99, .01))}\n\n#Election 8 2020\nelection20_outcomes=c('lib','cons')\nif(growthcycle19=='expansion'){election20=sample(election20_outcomes,1,prob=c(.75, .25))}\nif(growthcycle19=='contraction'){election20=sample(election20_outcomes,1,prob=c(.67, .33))}\n\npre_amt21=584454240 #&lt;- ENTER REAL PRE 2021\n#Growth Cycle 2021\ngrowthcycle21_outcomes=c('expansion','contraction')\nif(election20=='lib'){growthcycle21=sample(growthcycle21_outcomes,1,prob=c(.99, .01))}\nif(election20=='cons'){growthcycle21=sample(growthcycle21_outcomes,1,prob=c(.67, .33))}\nexp_rate_noise=exp_rate+rnorm(1, 2.07, 0.64)\ncont_rate_noise=cont_rate+rnorm(1, 1.63, 1.27)\n\nif(growthcycle21=='expansion'){post_amt21q1=pre_amt21q1*exp_rate_noise}\nif(growthcycle21=='contraction'){post_amt21q1=pre_amt21q1*cont_rate_noise}\n\ninsurance21q1=ifelse(growthcycle21=='expansion',0.60*post_amt21q1,0.90*post_amt21q1)\ncovered21q1 &lt;- insurance21q1/real2021q1\nresults21q1[i,]=c('2021',pre_amt21q1,election20, growthcycle21,post_amt21q1,real2021q1, insurance21q1, covered21q1)\n\nif(growthcycle21=='expansion'){post_amt21q2=pre_amt21q2*exp_rate_noise}\nif(growthcycle21=='contraction'){post_amt21q2=pre_amt21q2*cont_rate_noise}\n\ninsurance21q2=ifelse(growthcycle21=='expansion',0.60*post_amt21q2,0.90*post_amt21q2)\ncovered21q2 &lt;- insurance21q2/real2021q2\nresults21q2[i,]=c('2021',pre_amt21q2,election20, growthcycle21,post_amt21q2,real2021q2, insurance21q2, covered21q2)\n\nif(growthcycle21=='expansion'){post_amt21q3=pre_amt21q3*exp_rate_noise}\nif(growthcycle21=='contraction'){post_amt21q3=pre_amt21q3*cont_rate_noise}\n\ninsurance21q3=ifelse(growthcycle21=='expansion',0.60*post_amt21q3,0.90*post_amt21q3)\ncovered21q3 &lt;- insurance21q3/real2021q3\nresults21q3[i,]=c('2021',pre_amt21q3,election20, growthcycle21,post_amt21q3,real2021q3, insurance21q3, covered21q3)\n}\nCode\nr99q1 &lt;- as.data.frame(results99q1)\nr99q2 &lt;- as.data.frame(results99q2)\nr99q3 &lt;- as.data.frame(results99q3)\nCode\nr02q1 &lt;- as.data.frame(results02q1)\nr02q2 &lt;- as.data.frame(results02q2)\nr02q3 &lt;- as.data.frame(results02q3)\nCode\nr06q1 &lt;- as.data.frame(results06q1)\nr06q2 &lt;- as.data.frame(results06q2)\nr06q3 &lt;- as.data.frame(results06q3)\nCode\nr08q1 &lt;- as.data.frame(results08q1)\nr08q2 &lt;- as.data.frame(results08q2)\nr08q3 &lt;- as.data.frame(results08q3)\nCode\nr10q1 &lt;- as.data.frame(results10q1)\nr10q2 &lt;- as.data.frame(results10q2)\nr10q3 &lt;- as.data.frame(results10q3)\nCode\nr13q1 &lt;- as.data.frame(results13q1)\nr13q2 &lt;- as.data.frame(results13q2)\nr13q3 &lt;- as.data.frame(results13q3)\nCode\nr17q1 &lt;- as.data.frame(results17q1)\nr17q2 &lt;- as.data.frame(results17q2)\nr17q3 &lt;- as.data.frame(results17q3)\nCode\nr21q1 &lt;- as.data.frame(results21q1)\nr21q2 &lt;- as.data.frame(results21q2)\nr21q3 &lt;- as.data.frame(results21q3)\nCode\nr99q1$Post_Amtq1 &lt;- as.numeric(as.character(r99q1$Post_Amtq1))\nr99q2$Post_Amtq2 &lt;- as.numeric(as.character(r99q2$Post_Amtq2))\nr99q3$Post_Amtq3 &lt;- as.numeric(as.character(r99q3$Post_Amtq3))\nr99q1$Insuranceq1 &lt;- as.numeric(as.character(r99q1$Insuranceq1))\nr99q2$Insuranceq2 &lt;- as.numeric(as.character(r99q2$Insuranceq2))\nr99q3$Insuranceq3 &lt;- as.numeric(as.character(r99q3$Insuranceq3))\nr99q1$Real_Amtq1 &lt;- as.numeric(as.character(r99q1$Real_Amtq1))\nr99q2$Real_Amtq2 &lt;- as.numeric(as.character(r99q2$Real_Amtq2))\nr99q3$Real_Amtq3 &lt;- as.numeric(as.character(r99q3$Real_Amtq3))\nr99realall &lt;- data.frame(r99q1$Real_Amtq1, r99q2$Real_Amtq2, r99q3$Real_Amtq3)\nr99insurance &lt;- data.frame(r99q1$Insuranceq1, r99q2$Insuranceq2, r99q3$Insuranceq3)\nr99post &lt;- data.frame(r99q1$Post_Amtq1, r99q2$Post_Amtq2, r99q3$Post_Amtq3)\nr99df &lt;- data.frame(r99realall, r99insurance, r99post)\nCode\nr02q1$Post_Amtq1 &lt;- as.numeric(as.character(r02q1$Post_Amtq1))\nr02q2$Post_Amtq2 &lt;- as.numeric(as.character(r02q2$Post_Amtq2))\nr02q3$Post_Amtq3 &lt;- as.numeric(as.character(r02q3$Post_Amtq3))\nr02q1$Insuranceq1 &lt;- as.numeric(as.character(r02q1$Insuranceq1))\nr02q2$Insuranceq2 &lt;- as.numeric(as.character(r02q2$Insuranceq2))\nr02q3$Insuranceq3 &lt;- as.numeric(as.character(r02q3$Insuranceq3))\nr02q1$Real_Amtq1 &lt;- as.numeric(as.character(r02q1$Real_Amtq1))\nr02q2$Real_Amtq2 &lt;- as.numeric(as.character(r02q2$Real_Amtq2))\nr02q3$Real_Amtq3 &lt;- as.numeric(as.character(r02q3$Real_Amtq3))\nr02realall &lt;- data.frame(r02q1$Real_Amtq1, r02q2$Real_Amtq2, r02q3$Real_Amtq3)\nr02insurance &lt;- data.frame(r02q1$Insuranceq1, r02q2$Insuranceq2, r02q3$Insuranceq3)\nr02post &lt;- data.frame(r02q1$Post_Amtq1, r02q2$Post_Amtq2, r02q3$Post_Amtq3)\nr02df &lt;- data.frame(r02realall, r02insurance, r02post)\nCode\nr06q1$Post_Amtq1 &lt;- as.numeric(as.character(r06q1$Post_Amtq1))\nr06q2$Post_Amtq2 &lt;- as.numeric(as.character(r06q2$Post_Amtq2))\nr06q3$Post_Amtq3 &lt;- as.numeric(as.character(r06q3$Post_Amtq3))\nr06q1$Insuranceq1 &lt;- as.numeric(as.character(r06q1$Insuranceq1))\nr06q2$Insuranceq2 &lt;- as.numeric(as.character(r06q2$Insuranceq2))\nr06q3$Insuranceq3 &lt;- as.numeric(as.character(r06q3$Insuranceq3))\nr06q1$Real_Amtq1 &lt;- as.numeric(as.character(r06q1$Real_Amtq1))\nr06q2$Real_Amtq2 &lt;- as.numeric(as.character(r06q2$Real_Amtq2))\nr06q3$Real_Amtq3 &lt;- as.numeric(as.character(r06q3$Real_Amtq3))\nr06realall &lt;- data.frame(r06q1$Real_Amtq1, r06q2$Real_Amtq2, r06q3$Real_Amtq3)\nr06insurance &lt;- data.frame(r06q1$Insuranceq1, r06q2$Insuranceq2, r06q3$Insuranceq3)\nr06post &lt;- data.frame(r06q1$Post_Amtq1, r06q2$Post_Amtq2, r06q3$Post_Amtq3)\nr06df &lt;- data.frame(r06realall, r06insurance, r06post)\nCode\nr08q1$Post_Amtq1 &lt;- as.numeric(as.character(r08q1$Post_Amtq1))\nr08q2$Post_Amtq2 &lt;- as.numeric(as.character(r08q2$Post_Amtq2))\nr08q3$Post_Amtq3 &lt;- as.numeric(as.character(r08q3$Post_Amtq3))\nr08q1$Insuranceq1 &lt;- as.numeric(as.character(r08q1$Insuranceq1))\nr08q2$Insuranceq2 &lt;- as.numeric(as.character(r08q2$Insuranceq2))\nr08q3$Insuranceq3 &lt;- as.numeric(as.character(r08q3$Insuranceq3))\nr08q1$Real_Amtq1 &lt;- as.numeric(as.character(r08q1$Real_Amtq1))\nr08q2$Real_Amtq2 &lt;- as.numeric(as.character(r08q2$Real_Amtq2))\nr08q3$Real_Amtq3 &lt;- as.numeric(as.character(r08q3$Real_Amtq3))\nr08realall &lt;- data.frame(r08q1$Real_Amtq1, r08q2$Real_Amtq2, r08q3$Real_Amtq3)\nr08insurance &lt;- data.frame(r08q1$Insuranceq1, r08q2$Insuranceq2, r08q3$Insuranceq3)\nr08post &lt;- data.frame(r08q1$Post_Amtq1, r08q2$Post_Amtq2, r08q3$Post_Amtq3)\nr08df &lt;- data.frame(r08realall, r08insurance, r08post)\nCode\nr10q1$Post_Amtq1 &lt;- as.numeric(as.character(r10q1$Post_Amtq1))\nr10q2$Post_Amtq2 &lt;- as.numeric(as.character(r10q2$Post_Amtq2))\nr10q3$Post_Amtq3 &lt;- as.numeric(as.character(r10q3$Post_Amtq3))\nr10q1$Insuranceq1 &lt;- as.numeric(as.character(r10q1$Insuranceq1))\nr10q2$Insuranceq2 &lt;- as.numeric(as.character(r10q2$Insuranceq2))\nr10q3$Insuranceq3 &lt;- as.numeric(as.character(r10q3$Insuranceq3))\nr10q1$Real_Amtq1 &lt;- as.numeric(as.character(r10q1$Real_Amtq1))\nr10q2$Real_Amtq2 &lt;- as.numeric(as.character(r10q2$Real_Amtq2))\nr10q3$Real_Amtq3 &lt;- as.numeric(as.character(r10q3$Real_Amtq3))\nr10realall &lt;- data.frame(r10q1$Real_Amtq1, r10q2$Real_Amtq2, r10q3$Real_Amtq3)\nr10insurance &lt;- data.frame(r10q1$Insuranceq1, r10q2$Insuranceq2, r10q3$Insuranceq3)\nr10post &lt;- data.frame(r10q1$Post_Amtq1, r10q2$Post_Amtq2, r10q3$Post_Amtq3)\nr10df &lt;- data.frame(r10realall, r10insurance, r10post)\nCode\nr13q1$Post_Amtq1 &lt;- as.numeric(as.character(r13q1$Post_Amtq1))\nr13q2$Post_Amtq2 &lt;- as.numeric(as.character(r13q2$Post_Amtq2))\nr13q3$Post_Amtq3 &lt;- as.numeric(as.character(r13q3$Post_Amtq3))\nr13q1$Insuranceq1 &lt;- as.numeric(as.character(r13q1$Insuranceq1))\nr13q2$Insuranceq2 &lt;- as.numeric(as.character(r13q2$Insuranceq2))\nr13q3$Insuranceq3 &lt;- as.numeric(as.character(r13q3$Insuranceq3))\nr13q1$Real_Amtq1 &lt;- as.numeric(as.character(r13q1$Real_Amtq1))\nr13q2$Real_Amtq2 &lt;- as.numeric(as.character(r13q2$Real_Amtq2))\nr13q3$Real_Amtq3 &lt;- as.numeric(as.character(r13q3$Real_Amtq3))\nr13realall &lt;- data.frame(r13q1$Real_Amtq1, r13q2$Real_Amtq2, r13q3$Real_Amtq3)\nr13insurance &lt;- data.frame(r13q1$Insuranceq1, r13q2$Insuranceq2, r13q3$Insuranceq3)\nr13post &lt;- data.frame(r13q1$Post_Amtq1, r13q2$Post_Amtq2, r13q3$Post_Amtq3)\nr13df &lt;- data.frame(r13realall, r13insurance, r13post)\nCode\nr17q1$Post_Amtq1 &lt;- as.numeric(as.character(r17q1$Post_Amtq1))\nr17q2$Post_Amtq2 &lt;- as.numeric(as.character(r17q2$Post_Amtq2))\nr17q3$Post_Amtq3 &lt;- as.numeric(as.character(r17q3$Post_Amtq3))\nr17q1$Insuranceq1 &lt;- as.numeric(as.character(r17q1$Insuranceq1))\nr17q2$Insuranceq2 &lt;- as.numeric(as.character(r17q2$Insuranceq2))\nr17q3$Insuranceq3 &lt;- as.numeric(as.character(r17q3$Insuranceq3))\nr17q1$Real_Amtq1 &lt;- as.numeric(as.character(r17q1$Real_Amtq1))\nr17q2$Real_Amtq2 &lt;- as.numeric(as.character(r17q2$Real_Amtq2))\nr17q3$Real_Amtq3 &lt;- as.numeric(as.character(r17q3$Real_Amtq3))\nr17realall &lt;- data.frame(r17q1$Real_Amtq1, r17q2$Real_Amtq2, r17q3$Real_Amtq3)\nr17insurance &lt;- data.frame(r17q1$Insuranceq1, r17q2$Insuranceq2, r17q3$Insuranceq3)\nr17post &lt;- data.frame(r17q1$Post_Amtq1, r17q2$Post_Amtq2, r17q3$Post_Amtq3)\nr17df &lt;- data.frame(r17realall, r17insurance, r17post)\nCode\nr21q1$Post_Amtq1 &lt;- as.numeric(as.character(r21q1$Post_Amtq1))\nr21q2$Post_Amtq2 &lt;- as.numeric(as.character(r21q2$Post_Amtq2))\nr21q3$Post_Amtq3 &lt;- as.numeric(as.character(r21q3$Post_Amtq3))\nr21q1$Insuranceq1 &lt;- as.numeric(as.character(r21q1$Insuranceq1))\nr21q2$Insuranceq2 &lt;- as.numeric(as.character(r21q2$Insuranceq2))\nr21q3$Insuranceq3 &lt;- as.numeric(as.character(r21q3$Insuranceq3))\nr21q1$Real_Amtq1 &lt;- as.numeric(as.character(r21q1$Real_Amtq1))\nr21q2$Real_Amtq2 &lt;- as.numeric(as.character(r21q2$Real_Amtq2))\nr21q3$Real_Amtq3 &lt;- as.numeric(as.character(r21q3$Real_Amtq3))\nr21q1$Coveredq1 &lt;- as.numeric(as.character(r21q1$Coveredq1))\nr21q2$Coveredq2 &lt;- as.numeric(as.character(r21q2$Coveredq2))\nr21q3$Coveredq3 &lt;- as.numeric(as.character(r21q3$Coveredq3))\nr21realall &lt;- data.frame(r21q1$Real_Amtq1, r21q2$Real_Amtq2, r21q3$Real_Amtq3)\nr21insurance &lt;- data.frame(r21q1$Insuranceq1, r21q2$Insuranceq2, r21q3$Insuranceq3)\nr21post &lt;- data.frame(r21q1$Post_Amtq1, r21q2$Post_Amtq2, r21q3$Post_Amtq3)\nr21covered &lt;- data.frame(r21q1$Coveredq1, r21q2$Coveredq2, r21q3$Coveredq3)\nr21df &lt;- data.frame(r21realall, r21insurance, r21post, r21covered)\nThis paper explores the concept of Political Risk Insurance (PRI) for Canadian Oil and Gas companies. The examination is to determine whether these companies should seek out PRI with results that hope to show the benefits or consequences. Having the conditions of the country’s influence from the business cycle, rare world changing events, and federal elections. Simulations that have changes in probabilities and random distributions to cover possible outcomes and repeat a thousand times. The results show that the rare usage of PRI is simply a lack of knowledge. Another finding is that from a policy point of view, companies see an ebb and flow with revenue. So, why spend money in attempt to sway the outcome of elections if it is shown to futile."
  },
  {
    "objectID": "PRI.html#introduction",
    "href": "PRI.html#introduction",
    "title": "PRI Canadian O&G",
    "section": "1. Introduction",
    "text": "1. Introduction"
  },
  {
    "objectID": "PRI.html#conceptual-framework",
    "href": "PRI.html#conceptual-framework",
    "title": "PRI Canadian O&G",
    "section": "2. Conceptual Framework",
    "text": "2. Conceptual Framework"
  },
  {
    "objectID": "PRI.html#data",
    "href": "PRI.html#data",
    "title": "PRI Canadian O&G",
    "section": "3. Data",
    "text": "3. Data"
  },
  {
    "objectID": "PRI.html#data-source",
    "href": "PRI.html#data-source",
    "title": "PRI Canadian O&G",
    "section": "3.1 Data Source",
    "text": "3.1 Data Source\nData was primarily observed from The System for Electronic Document Analysis and Retrieval (SEDAR) which is a filing system developed for the Canadian Securities Administrators. Similar to the United States Securities and Exchange Commission (SEC), but is not a federal or province entity, but rather is “is the official site that provides access to most public securities documents and information filed by issuers with the thirteen provincial and territorial securities regulatory authorities (”Canadian Securities Administrators” or “CSA”) in the SEDAR filing system. The statutory objective in making public this filed information is to enhance investor awareness of the business and affairs of issuers and to promote confidence in the transparent operation of capital markets in Canada. Achieving this objective relies heavily on the provision of accurate information on market participants ” (SEDAR, 2022).\nWe used SEDAR as the point of reference to collect oil and gas producing revenue from as many oil and gas companies from Canada that are reported and filled at SEDAR. These fillings go back to 1990, but most data only dates back to 1997 and this is where the discussion starts. Using the median value of revenue from all oil and gas companies from 1997, $2.09 billion (Canadian dollars). This amount is translated with inflation into today’s current dollars. This process was accomplished by using data from the Economic Research in the U.S. Federal Reserve Bank of St. Louis (FRED)\nThe following years were observed to look at elections from 1998 to 2021 from the website directly from the Parliament of Canada. This was to determine which parties were elected to the majority and the probability of those parties. The probabilities were found from various polling firms. From these polls, the data taken was only pertaining to the liberal and conservative parties. The other parties were left out as to they did provide a significant impact (Insert Evidence)\nEach year that falls in-between elections were tracked by the business cycle for Canada, whether the aggregate of each year individually was an expansion year or contraction year. Although the business cycle fluctuates more within a year, the aggregate for the whole year was used as this influences voting more so (Insert Evidence). This data was found from FRED."
  },
  {
    "objectID": "PRI.html#data-processing",
    "href": "PRI.html#data-processing",
    "title": "PRI Canadian O&G",
    "section": "3.2 Data processing",
    "text": "3.2 Data processing\nThe data was pulled, and formatted in order to show an easy representation that can be read easily. The dollar amount of each was translated with the Consumer Price Index (CPI) calculator (from the Bank of Canada) to show each year’s revenue into the dollar amount of 2021. Meaning, given the graph below (Will Reformat tables and graphs to reference better) you can see that 1997’s revenue dollar amount is multiplied by 1.5740 to be the equivalent amount if that was earned in 2021.\n\n\nCode\nboxplot(Revenue ~ Year, data=fellow, ylim=c(100000, 160000000000))\n\n\n\n\n\nRevenue earned by all companies together per year. Each year is in today’s dollars (as of 2022).\n\n\n\n\nThe simulation started in the year 1998 where from the polling information it was determined that the liberal party had a 53% chance of winning over the conservative party at 47%. Every year following, whether calculating for the business cycle or for the next election, the probabilities were based on the given condition of the previous year. It follows as such that in 1999 there was no election, so the business cycle was calculated. This was seen has there being a 99% of expansion following a liberal win, there being a 67% chance of contraction following a conservative win. Probability for a contraction year is simply 1 minus the probability of growth. Similarly, the next election was in 2001 and it follows that the probability for a liberal win following an expansion is 75% while following a contraction is 67%. Again it follows that the probability of not winning is simply the 1 minus the probability of winning.\nWith calculations following election years, it is used that a expansion rate of 1.021 and a contraction rate of 1.016. These rates were calculated with the found aggregate for each year, compiled together, and then set for the average rate over the 22 year time span. The rates are used with random normal distribution to predict an amount of revenue that all companies median revenue amount would end in. For the expansion rate, there is a mean of 2.07 and a standard deviation of 0.64. For the contraction rate, there is a mean of 1.63 and a standard deviation of 1.27.\nThe amount for post year is used to determine an insurance amount. This amount is would be the coverage amount that should be sought after in order to protect profit. If the business cycle for the year is expansion, the predicted post amount is multiplied by .95, but if it is a contraction the predicted post amount is multiplied by .60. If there is an expansion following an election, a company should experience growth in revenue, therefore, there should not be a reason for insurance to be used if there is no loss experienced. As for a contraction, a loss in revenue not only could happen but is expected. With the economy of the country going through a downturn, a company for oil and gas would not be able to not experience the same. The hope would be to use an insurance policy to cover any and all loss. We use the value of 60% as a baseline to determine if there is a correlation, and enough to show that there is evidence to a reason for PRI. The reason why the insurance is not more than 60%, is for the insurance company (input more reason given reading articles as to why this is 60 and not closer to 80 or 85) also needs to mitigate loss. The remaining 40% from the predicted amount would be the amount given to an insurance company in premiums and a deductible to use the policy."
  },
  {
    "objectID": "PRI.html#data-results",
    "href": "PRI.html#data-results",
    "title": "PRI Canadian O&G",
    "section": "3.3 Data Results",
    "text": "3.3 Data Results\nThe results from the simulation was interesting to say the least. Different outcomes came from different inputs, as expected, but when there were similar inputs, there were not so similar outputs. ^&. We also see when there are different inputs, there would be similar outputs. For example, the years 1999 and 2021, both followed elections that led to a Liberal win. Now 1999 was an expansion year while 2021 was a contraction. For both years the prediction model under performed greatly from the actual end of year amount was (2021 even more so). How can we explain the differences? This would a be a great question for another analysis, all we can say is that different time periods are less predictable than others.\nAmoung the well predicted\n\n\nCode\nBusiness.Cycle.1999 &lt;- r99q2$Growth_Cycleq2\nElection.Winner.1998 &lt;- r99q2$Winner\nInsurance.1999 &lt;-r99q2$Insuranceq2\ndata99 = data.frame(Insurance.1999, Election.Winner.1998, Business.Cycle.1999)\nplot99 &lt;- ggplot(data99, aes(x=Business.Cycle.1999, y=Insurance.1999, \n                  fill=Election.Winner.1998)) + labs(title=\"1999 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real1999q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt99q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot99\n\n\n\n\n\n\n\nCode\nBusiness.Cycle.2002 &lt;- r02q2$Growth_Cycleq2\nElection.Winner.2001 &lt;- r02q2$Winner\nInsurance.2002 &lt;-r02q2$Insuranceq2\ndata02 = data.frame(Insurance.2002, Election.Winner.2001, Business.Cycle.2002)\nplot02 &lt;- ggplot(data02, aes(x=Business.Cycle.2002, y=Insurance.2002, \n                  fill=Election.Winner.2001)) + labs(title=\"2002 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real2002q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt02q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot02\n\n\n\n\n\n\n\nCode\nBusiness.Cycle.2006 &lt;- r06q2$Growth_Cycleq2\nElection.Winner.2005 &lt;- r06q2$Winner\nInsurance.2006 &lt;-r06q2$Insuranceq2\ndata06 = data.frame(Insurance.2006, Election.Winner.2005, Business.Cycle.2006)\nplot06 &lt;- ggplot(data06, aes(x=Business.Cycle.2006, y=Insurance.2006, \n                  fill=Election.Winner.2005)) + labs(title=\"2006 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real2006q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt06q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot06\n\n\n\n\n\n\n\nCode\nBusiness.Cycle.2008 &lt;- r08q2$Growth_Cycleq2\nElection.Winner.2007 &lt;- r08q2$Winner\nInsurance.2008 &lt;- r08q2$Insuranceq2\ndata08 = data.frame(Insurance.2008, Election.Winner.2007, Business.Cycle.2008)\nplot08 &lt;- ggplot(data08, aes(x=Business.Cycle.2008, y=Insurance.2008, \n                  fill=Election.Winner.2007)) + labs(title=\"2008 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real2008q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt08q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot08\n\n\n\n\n\n\n\nCode\nBusiness.Cycle.2010 &lt;- r10q2$Growth_Cycleq2\nElection.Winner.2009 &lt;- r10q2$Winner\nInsurance.2010 &lt;-r10q2$Insuranceq2\ndata10 = data.frame(Insurance.2010, Election.Winner.2009, Business.Cycle.2010)\nplot10 &lt;- ggplot(data10, aes(x=Business.Cycle.2010, y=Insurance.2010, \n                  fill=Election.Winner.2009)) + labs(title=\"2010 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real2010q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt10q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot10\n\n\n\n\n\n\n\nCode\nBusiness.Cycle.2013 &lt;- r13q2$Growth_Cycleq2\nElection.Winner.2012 &lt;- r13q2$Winner\nInsurance.2013 &lt;-r13q2$Insuranceq2\ndata13 = data.frame(Insurance.2013, Election.Winner.2012, Business.Cycle.2013)\nplot13 &lt;- ggplot(data13, aes(x=Business.Cycle.2013, y=Insurance.2013, \n                  fill=Election.Winner.2012)) + labs(title=\"2013 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real2013q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt13q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot13\n\n\n\n\n\n\n\nCode\nBusiness.Cycle.2017 &lt;- r17q2$Growth_Cycleq2\nElection.Winner.2016 &lt;- r17q2$Winner\nInsurance.2017 &lt;-r17q2$Insuranceq2\ndata17 = data.frame(Insurance.2017, Election.Winner.2016, Business.Cycle.2017)\nplot17 &lt;- ggplot(data17, aes(x=Business.Cycle.2017, y=Insurance.2017, \n                  fill=Election.Winner.2016)) + labs(title=\"2017 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real2017q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt17q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot17\n\n\n\n\n\n\n\nCode\nBusiness.Cycle.2021 &lt;- r21q2$Growth_Cycleq2\nElection.Winner.2021 &lt;- r21q2$Winner\nInsurance.2021 &lt;-r21q2$Insuranceq2\ndata21 = data.frame(Insurance.2021, Election.Winner.2021, Business.Cycle.2021)\nplot21 &lt;- ggplot(data21, aes(x=Business.Cycle.2021, y=Insurance.2021, \n                  fill=Election.Winner.2021)) + labs(title=\"2021 Results\") + geom_boxplot(\n                  ) + geom_hline(aes(yintercept = real2021q2,linetype = \"Actual End of Year\"),\n                  colour= 'red') + geom_hline(aes(yintercept = pre_amt21q2,linetype\n                  = \"Pre-Year Amount\"), colour= 'green') + scale_linetype_manual(\n                  name =\"Revenue Totals\", values = c(1,1), \n                  guide = guide_legend(override.aes = list(color = c('red', 'green'))))\nplot21"
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "PRIOilandGas",
    "section": "",
    "text": "-Proficient in programs R, Python, and Microsoft Office Suite.\n-Fully capable of preforming independent research (see below [where I will fill in more of project])\n-Able to be trained with quick turn around to train others to same high level standard"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "PRIOilandGas",
    "section": "",
    "text": "-College courses for Mathematics were focused on statistics, regression, and applied programming\n-College courses for Economics were focused on econometrics, and macro.\n-Research developed while at the university was a combination of above."
  },
  {
    "objectID": "ChainPulse_ultimate.html#team-members",
    "href": "ChainPulse_ultimate.html#team-members",
    "title": "Decentralization of Cryptocurrency Tokens on the Ethereum Blockchain",
    "section": "Team Members",
    "text": "Team Members\n\nAlex Schaef &gt;Mathematical Analyst. Took the lead in understanding previous projects and linking various variables to the concept of decentralized finance. Also acted as lead notetaker for meetings both within the group and with sponsors from Chainpulse, and has written a majority of the text blocks in this notebook, including “Introduction,” “About the Data,” “Conclusion,” and some graph breakdowns.\nNathaniel Hamilton Thompson &gt; Project Manager. Oversaw management, led in creating the visualization of data, including breaking the data into time segments, and did research to find numerous outside resources to aid in the group’s understanding of the project.\nOrin Crouse &gt; Python Coder. Took the lead in all coding-related aspects of the project. Using the code provided by a previous project, Orin converted it to run successfully with new data to expand on the findings of the previous project and ensured that it continued to run despite new errors that have come with updates to various packages. &gt; Put in the following sections &gt;&gt; “General Approach”, “Code Starts”, “Scatter plot by Months”, “Sorting, Defining Core-Periphery Structure”, “Form Graph”, “Network Dynamics”. Repeated for Dydx Token. Then added “Citiations”."
  },
  {
    "objectID": "ChainPulse_ultimate.html#general-approach",
    "href": "ChainPulse_ultimate.html#general-approach",
    "title": "Decentralization of Cryptocurrency Tokens on the Ethereum Blockchain",
    "section": "General Approach",
    "text": "General Approach\nThis notebook take the approach of taking the networks for the Euler token and reframing the data into simpler, more readable outputs to better explain the idea of the centralization for the tokens. A quote to describe the idea used is  “core-periphery structure in its simplest form refers to a partition of a network into two groups of nodes called core and periphery, where core nodes are densely interconnected (i.e., adjacent), and peripheral nodes are adjacent to the core nodes but not to other peripheral nodes”.[2]\nIf a token is to be described as being a central network we would see our graphs consist of core nodes, while a decentralized network would consist of periphery nodes.\nCore-periphery pairs are defined to have the properties of: \\[A^* = A_{ij}^* = (x_i+x_j - x_ix_j)δ(c_i,c_j) \\] We see \\(x_i=1\\) for core nodes and \\(x_i=0\\) for peripheral nodes. The index of the core-periphery pair to which node \\(i\\) belongs to is represented by \\(c_i(1 ≤ c_i ≤ C)\\). The following properties are treated like axioms here. 1.) Every code node is adjacent to every other code node. 2.) Every core node is adjacent to all corresponding peripheral nodes. 3.) Every peripheral node is not adjacent to any other peripheral node. 4.) Lastly, there are no edges between different idealised core-periphery pairs. [3, 4]  When computing you want \\(c_i, x_i ∈ (1 ≤ i ≤ N)\\) to be maximized comparetively between \\(A\\) and \\(A^*\\). This is shown by:\n\\[Q_{config}^{cp} = \\frac{1}{2M} \\sum_{i=1}^N \\sum_{j=1}^N A_{ij}A_{ij}^* - Ε [\\frac{1}{2M} \\sum_{i=1}^N \\sum_{j=1}^{conf}(1-A_{ij}^*)]\\] \nUsing a configuration model where the epected number of edges between nodes \\(i\\) and \\(j\\) can be represented by \\(Ε[A_{ij}^{conf}]=\\frac{d_id_j}{2M}\\).\nIn the section titled “Construct Continuous Core-Periphery Structures”, various graphs are fromed, each with different algorithms."
  },
  {
    "objectID": "ChainPulse_ultimate.html#about-the-data",
    "href": "ChainPulse_ultimate.html#about-the-data",
    "title": "Decentralization of Cryptocurrency Tokens on the Ethereum Blockchain",
    "section": "About the Data",
    "text": "About the Data\nOur data sets consist of five variables. &gt;There are three “addresses” that consist of a string of numbers and letters that are used to assign a unique moniker to each crypto token and to each account that trades cryptocurrency. They are all categorical data, as they are a name/identifier. The actual numbers and letters are not important, as they are only used to differentiate between different tokens and between different traders.\n\n\nToken_address is always the same within each data set because there is only one token per data set (in this project, we are using two data sets covering the Euler and dYdX tokens).\n\n\n\n\nFrom_address indicates which account is selling the tokens.\n\n\n\n\nTo_address indicates which account is buying the tokens.\n\n\n\nBlock_timestamp tells us the time and day of the transaction.\n\n\nValue shows the number of tokens traded in the transaction (numerical).\n\nOther variables we caluclate include:\n\nGiant Component size ratio: “Giant componenet” is defined as the node with the most edges, or the address with the largest number of transactions for that time period. The ratio is calculated as (# edges on giant component) / (total # of edges)\nRange: (0,1]\n\n\nModularity: Under this calculation, nodes are separated into communities to examine if separate communities exist. The modularity score is the fraction of the edges that fall within the given groups minus the expected fraction if edges were distributed at random. The existance of multiple communities indicate a decentralized network, as transactions are not linked to a single central point.\n\n\nStandard Deviation of Degree Centrality: “Degree Centrality” is equal to the number of edges on a node. This variable is simply the standard deviation of all nodes’ degree centralities in a given time frame.\n\n\n# @title Background Code and Libraries Used\n#%%capture\n!pip install matplotlib==3.5.1 &&gt; /dev/null\n!pip install --upgrade scipy networkx &&gt; /dev/null\n!pip install cpnet &&gt; /dev/null\n\nimport cpnet\nimport networkx as nx\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nimport pandas as pd\nimport os\nimport time\nimport zipfile\nfrom tqdm import tqdm\nimport community.community_louvain as community\nfrom numpy import *\nimport random\nimport requests\nimport json\nimport datetime\n\nprint(\"The libraries used are: matplotlib (verison 3.5.1), scipy, networkx, cpnet, numpy, pandas, os, time, zipfile, tqdm,\")\nprint(\"community.community_louvain, random, requests, json, and datetime.\")\n\nThe libraries used are: matplotlib (verison 3.5.1), scipy, networkx, cpnet, numpy, pandas, os, time, zipfile, tqdm,\ncommunity.community_louvain, random, requests, json, and datetime.\n\n\n#Euler Token\n\n# @title Upload Data\n\nurl = 'https://raw.githubusercontent.com/nghthompson/Math_Clinic_Project/main/Euler%20Crypto%20Data.csv'\nedf = pd.read_csv(url)\n\n##Network Visualization\n\n# @title Refinement of Data\n\n#Number Wallet IDs for simplification\n\nunique_addresses = set(edf['from_address'].unique()) | set(edf['to_address'].unique())\nmapping = {address: n for n, address in enumerate(unique_addresses)}\n\nedf[['from_ID', 'to_ID']] = edf[['from_address', 'to_address']].replace(mapping)\n\n# edit timestamp to sort by days\n\nedf.rename(columns={'f0_':'value'}, inplace = True)\nedf = edf.dropna()\nedf['value'] = edf['value'].apply(lambda x: float(x))\nedf['timestamp'] = pd.to_datetime(edf['block_timestamp'])\nedf['timestamp'] = edf['timestamp'].apply(lambda x: str(x)[:10])\nedf['timestamp'] = pd.to_datetime(edf['timestamp'])\n\n# breakdown dataframe into weeks and months\n\nall_time = edf\njune = edf[(edf.timestamp &gt;= '2022-06-01') & (edf.timestamp &lt;= '2022-06-30')]\njuly = edf[(edf.timestamp &gt;= '2022-07-01') & (edf.timestamp &lt;= '2022-07-31')]\naugust = edf[(edf.timestamp &gt;= '2022-08-01') & (edf.timestamp &lt;= '2022-08-31')]\nweek1 = edf[(edf.timestamp &gt;= '2022-06-19') & (edf.timestamp &lt;= '2022-06-25')]\nweek2 = edf[(edf.timestamp &gt;= '2022-06-26') & (edf.timestamp &lt;= '2022-07-02')]\nweek3 = edf[(edf.timestamp &gt;= '2022-07-03') & (edf.timestamp &lt;= '2022-07-09')]\nweek4 = edf[(edf.timestamp &gt;= '2022-07-10') & (edf.timestamp &lt;= '2022-07-16')]\nweek5 = edf[(edf.timestamp &gt;= '2022-07-17') & (edf.timestamp &lt;= '2022-07-23')]\nweek6 = edf[(edf.timestamp &gt;= '2022-07-24') & (edf.timestamp &lt;= '2022-07-30')]\nweek7 = edf[(edf.timestamp &gt;= '2022-07-31') & (edf.timestamp &lt;= '2022-08-06')]\nweek8 = edf[(edf.timestamp &gt;= '2022-08-07') & (edf.timestamp &lt;= '2022-08-13')]\nweek9 = edf[(edf.timestamp &gt;= '2022-08-14') & (edf.timestamp &lt;= '2022-08-20')]\nweek10 = edf[(edf.timestamp &gt;= '2022-08-21') & (edf.timestamp &lt;= '2022-08-27')]\n\nall_time_g = nx.from_pandas_edgelist(edf, source='from_ID', target='to_ID', edge_attr='value')\njune_g = nx.from_pandas_edgelist(june, source='from_ID', target='to_ID', edge_attr='value')\njuly_g = nx.from_pandas_edgelist(july, source='from_ID', target='to_ID', edge_attr='value')\naugust_g = nx.from_pandas_edgelist(august, source='from_ID', target='to_ID', edge_attr='value')\nweek1_g = nx.from_pandas_edgelist(week1, source='from_ID', target='to_ID', edge_attr='value')\nweek2_g = nx.from_pandas_edgelist(week2, source='from_ID', target='to_ID', edge_attr='value')\nweek3_g = nx.from_pandas_edgelist(week3, source='from_ID', target='to_ID', edge_attr='value')\nweek4_g = nx.from_pandas_edgelist(week4, source='from_ID', target='to_ID', edge_attr='value')\nweek5_g = nx.from_pandas_edgelist(week5, source='from_ID', target='to_ID', edge_attr='value')\nweek6_g = nx.from_pandas_edgelist(week6, source='from_ID', target='to_ID', edge_attr='value')\nweek7_g = nx.from_pandas_edgelist(week7, source='from_ID', target='to_ID', edge_attr='value')\nweek8_g = nx.from_pandas_edgelist(week8, source='from_ID', target='to_ID', edge_attr='value')\nweek9_g = nx.from_pandas_edgelist(week9, source='from_ID', target='to_ID', edge_attr='value')\nweek10_g = nx.from_pandas_edgelist(week10, source='from_ID', target='to_ID', edge_attr='value')\n\n\n# @title Network of All Transactions (June - August)\n\nall_comm = nx.community.label_propagation_communities(all_time_g)\ncommunity_index = {n: i for i, com in enumerate(all_comm) for n in com}\n\nplt.figure(figsize=(17, 17))\nplt.title('Network Graph'.format(len(all_time.index)))\nall_color = [community_index[n] for n in all_time_g]\nprint(len(all_time.index), 'Number Transactions for the entire data set')\nnx.draw(all_time_g, with_labels=False, node_size=13, node_color=all_color)\n\n11372 Number Transactions for the entire data set\n\n\n\n\n\n\n# @title Network of Each Month Broke Out\n\njune_comm = nx.community.label_propagation_communities(june_g)\ncommunity_index = {n: i for i, com in enumerate(june_comm) for n in com}\n\nplt.figure(figsize=(17, 17))\nplt.title('{:} Euler Transactions (June 2022)'.format(len(june.index)))\njune_color = [community_index[n] for n in june_g]\nprint(len(june.index), 'Number Transactions for June')\nnx.draw(june_g, with_labels=False, node_size=5, node_color=june_color)\n\n# network of July transactions\n\njuly_comm = nx.community.label_propagation_communities(july_g)\ncommunity_index = {n: i for i, com in enumerate(july_comm) for n in com}\n\nplt.figure(figsize=(17, 17))\nplt.title('Euler Transactions (July 2022)'.format(len(july.index)))\njuly_color = [community_index[n] for n in july_g]\nprint(len(july.index), 'Number Transactions for July')\nnx.draw(july_g, with_labels=False, node_size=5, node_color=july_color)\n\n# network of August transactions\n\naugust_comm = nx.community.label_propagation_communities(august_g)\ncommunity_index = {n: i for i, com in enumerate(august_comm) for n in com}\n\nplt.figure(figsize=(17, 17))\nplt.title('Euler Transactions (August 2022)'.format(len(august.index)))\naugust_color = [community_index[n] for n in august_g]\nprint(len(august.index), 'Number Transactions for August')\nnx.draw(august_g, with_labels=False, node_size=5, node_color=august_color)\n\n5485 Number Transactions for June\n3396 Number Transactions for July\n2490 Number Transactions for August\n\n\n\n\n\n\n\n\n\n\n\n\n# @title Scatter Plot of June. Day by Day\n\nplt.subplot(1,2,1)\nplt.scatter(june['timestamp'], june['to_ID'])\nplt.title('Buyer Transactions (June 2022)'.format(len(june.index)))\n\nplt.subplot(1,2,2)\nplt.scatter(june['from_ID'], june['to_ID'])\nplt.title('Seller Transactions (June 2022)'.format(len(june.index)))\n\nplt.tight_layout()\n\n\n\n\n\n# @title Scatter Plot of July. Day by Day\n\nplt.subplot(1,2,1)\nplt.scatter(july['timestamp'], july['to_ID'])\nplt.title('Buyer Transactions (July 2022)'.format(len(july.index)))\n\nplt.subplot(1,2,2)\nplt.scatter(july['from_ID'], july['to_ID'])\nplt.title('Seller Transactions (July 2022)'.format(len(july.index)))\n\nplt.tight_layout()\n\n\n\n\n\n# @title Scatter Plot of August. Day by Day\n\nplt.subplot(1,2,1)\nplt.scatter(august['timestamp'], august['to_ID'])\nplt.title('Buyer Transactions (August 2022)'.format(len(august.index)))\n\nplt.subplot(1,2,2)\nplt.scatter(august['from_ID'], august['to_ID'])\nplt.title('Seller Transactions (August 2022)'.format(len(august.index)))\n\nplt.tight_layout()"
  },
  {
    "objectID": "ChainPulse_ultimate.html#formation-of-core-periphery-graphs",
    "href": "ChainPulse_ultimate.html#formation-of-core-periphery-graphs",
    "title": "Decentralization of Cryptocurrency Tokens on the Ethereum Blockchain",
    "section": "Formation of Core-Periphery Graphs",
    "text": "Formation of Core-Periphery Graphs\n\n# @title Sorting and Defining Core-Periphery Structure\n\nedf.sort_values('block_timestamp', ascending = True)\n\n# data cleaning\n\nedf = edf[edf['timestamp']&gt;='2021-12-30']\nedf = edf[edf['timestamp']&lt;='2022-08-24']\n\n\nedf.to_csv('Euler Raw Transfer Data.csv')\n\nedf = edf.drop(columns = ['token_address','block_timestamp'])\n\n## add values between the 2 same addresses together\nedf[['from_address', 'to_address']] = np.sort(edf[['from_address', 'to_address']], axis=1)\nedf= edf.groupby(['timestamp','from_address','to_address']).agg(lambda x: sum(x)).reset_index()\nedf.to_csv('Euler transaction data_after preprocessing.csv')\nedf = pd.read_csv('Euler transaction data_after preprocessing.csv')\n\n##Network Analysis\n\nedf_time_partition= edf.groupby(['timestamp'])['to_address'].agg(['nunique']).reset_index()\nedf_time_partition = edf_time_partition.drop(['nunique'], axis=1)\n\n##Number of daily edges\n\nnum_nodes = []\nnum_edges = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # MultiDi Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of Number of nodes, number of edges\n    nodes = G.number_of_nodes()\n    edges = G.number_of_edges()\n    num_nodes.append(nodes)\n    num_edges.append(edges)\n\n    Network_Features={\"num_nodes\" : num_nodes,\"num_edges\" : num_edges}\nNetwork_Features=pd.DataFrame(Network_Features)\nNetwork_Features['time'] =  edf_time_partition['timestamp']\n\n### Degree Setting\n\nDegreemean = []\nDegreestd = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    #edf_1 = actsenrec.loc[actsenrec['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # MultiDi Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of Degree_centrality, mean_value\n    degrees = G.degree()\n    degree = list(dict(G.degree()).values())\n    edf_deg = {\"Degree\" : degree}\n    edf_deg = pd.DataFrame(edf_deg)\n    DC_mean = edf_deg['Degree'].mean()\n    DC_std = edf_deg['Degree'].std()\n    Degreemean.append(DC_mean)\n    Degreestd.append(DC_std)\n\nNetwork_Features['Degree mean']  = Degreemean\nNetwork_Features['Degree std']  = Degreestd\n\n##Extract Top 10 by ratio\n\ntop10Degreemean = []\ntop10Degreestd = []\n\nfor i in range(0,len(edf_time_partition)):\n\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    sender_mdegree= edf_1.groupby(['from_address'])['to_address'].count().reset_index()\n    receiver_mdegree = edf_1.groupby(['to_address'])['from_address'].count().reset_index()\n    sender_mdegree = sender_mdegree.rename(columns={'to_address':'degree'})\n    sender_mdegree = sender_mdegree.rename(columns={'from_address':'address'})\n    receiver_mdegree = receiver_mdegree.rename(columns = {'from_address':'degree'})\n    receiver_mdegree = receiver_mdegree.rename(columns = {'to_address':'address'})\n\n    merge = pd.merge(sender_mdegree,receiver_mdegree,on=\"address\",how = \"outer\")\n    merge = merge.fillna(int(0))\n    merge['degree'] = merge['degree_x']+merge['degree_y']\n\n    merge.sort_values(by=['degree'], ascending=False, inplace=True)\n    merge = merge.reset_index()\n    top5degree = merge['address'][0:10].tolist()\n\n    sen_top =  edf_1[edf_1['from_address'].isin(top5degree)]\n    rec_top= edf_1[edf_1['to_address'].isin(top5degree)]\n\n    topaddress = pd.concat([sen_top,rec_top]).drop_duplicates()\n\n    G = nx.from_pandas_edgelist(topaddress, 'from_address', 'to_address', 'value', nx.Graph())\n    # Calculation of absolute degree\n    degree = []\n    for j in range (0,2): ## MUST CHANGE BACK TO (0,10) LATER. FIND OUT WHY top5degree IS ONLY THREE VARIABLES\n        degrees = G.degree(top5degree[j])\n        degree.append(degrees)\n    edf_deg = {\"Degree\" : degree}\n    edf_deg = pd.DataFrame(edf_deg)\n    deg_mean = edf_deg['Degree'].mean()\n    deg_std = edf_deg['Degree'].std()\n    top10Degreemean.append(deg_mean)\n    top10Degreestd.append(deg_std)\n\nNetwork_Features['Top10Degree mean']  = top10Degreemean\nNetwork_Features['Top10Degree std']  = top10Degreestd\n\nNetwork_Features['Top10 Degree mean ratio']  = Network_Features['Top10Degree mean']/Network_Features['Degree mean']\n\n#The above code cells don't show much being there aren't 10 degrees found, but rather only two.\n#That means there are only two core nodes that reach the criteria to be considered core.\n#Already we see the Euler token to be more decentralized rather than central.\n\n### Degree centrality\nDCmean = []\nDCstd = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    #edf_1 = actsenrec.loc[actsenrec['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # MultiDi Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of Degree_centrality, mean_value\n    deg_cen = nx.degree_centrality(G)\n    edf_deg = pd.DataFrame.from_dict(deg_cen, orient='index', columns=['Degree_Centrality'])\n    DC_mean = edf_deg['Degree_Centrality'].mean()\n    DC_std = edf_deg['Degree_Centrality'].std()\n    DCmean.append(DC_mean)\n    DCstd.append(DC_std)\n\n#The above code cell redefines the core nodes found to double check and ensure the understanding of core is reached for the entire network.\n\n### Coefficient Clusters\n\nclustermean = []\nclusterstd = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    #edf_1 = actsenrec.loc[actsenrec['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # Unweighted-Directed Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of Clustering_Coefficient, mean_value, std\n    clustering = nx.clustering(G)\n    df_cluster = pd.DataFrame.from_dict(clustering, orient='index', columns=['Clustering_Coefficient'])\n    cluster_mean = df_cluster['Clustering_Coefficient'].mean()\n    cluster_std = df_cluster['Clustering_Coefficient'].std()\n    clustermean.append(cluster_mean)\n    clusterstd.append(cluster_std)\n\n#The above code cell is form the cluster by coefficient. This is for both core and periphery\n\n### Build Modularity\n\nmod_list = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    #edf_1 = actsenrec.loc[actsenrec['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # unweighted-undirected Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of modularity\n    part = community.best_partition(G)\n    mod = community.modularity(part,G)\n    mod_list.append(mod)\n\n    ### Build Transitivity\n\n    tran_list = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    #edf_1 = actsenrec.loc[actsenrec['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # Unweighted-undirected Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of transitivity,\n    tran = nx.transitivity(G)\n    tran_list.append(tran)\n\n### Centrality by Eigenvector\n\neigmean = []\neigstd = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    #edf_1 = actsenrec.loc[actsenrec['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # MultiDi Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of Closeness_centrality, mean_value\n    eig_cen = nx.eigenvector_centrality(G, max_iter=20000)\n    edf_eig = pd.DataFrame.from_dict(eig_cen, orient='index', columns=['eigenvector_centrality'])\n    eig_mean = edf_eig['eigenvector_centrality'].mean()\n    eig_std = edf_eig['eigenvector_centrality'].std()\n    eigmean.append(eig_mean)\n    eigstd.append(eig_std)\n\n### Closeness Centrality\n\nCCmean = []\nCCstd = []\nfor i in range(0,len(edf_time_partition)):\n\n    # Data Partition\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n\n    # MultiDi Network Building (weighted-directed graph)\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of Closeness_centrality, mean_value\n    close_cen = nx.closeness_centrality(G)\n    edf_close = pd.DataFrame.from_dict(close_cen, orient='index', columns=['Closeness_Centrality'])\n    CC_mean = edf_close['Closeness_Centrality'].mean()\n    CC_std = edf_close['Closeness_Centrality'].std()\n    CCmean.append(CC_mean)\n    CCstd.append(CC_std)\n\n### Number of components\n\ncomponents_cnt = []\nfor i in range(0,len(edf_time_partition)):\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n    com_cnt = nx.number_connected_components(G)\n    components_cnt.append(com_cnt)\n\n### Gaint component by size and number of nodes\n\ngiant_com_ratio = []\nfor i in range(0,len(edf_time_partition)):\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n# G = nx.Graph()\n    Gcc = sorted(nx.connected_components(G), key=len, reverse=True)\n    G0 = G.subgraph(Gcc[0])\n#com_cnt = nx.number_connected_components(G)\n#components_cnt.append(com_cnt)\n    nodes = G0.number_of_nodes()\n    nodes_whole = G.number_of_nodes()\n    ratio = nodes/nodes_whole\n    giant_com_ratio.append(ratio)\n\n### Save features output\n\nNetwork_Features['DCmean']=DCmean\nNetwork_Features['DCstd']=DCstd\nNetwork_Features['clustermean']=clustermean\nNetwork_Features['clusterstd']=clusterstd\nNetwork_Features['modularity']=mod_list\nNetwork_Features['transitivity']=tran_list\nNetwork_Features['eig_mean']=eigmean\nNetwork_Features['eig_std']=eigstd\nNetwork_Features['closenessmean']=CCmean\nNetwork_Features['closenessstd']=CCstd\nNetwork_Features['Components_cnt']=components_cnt\nNetwork_Features['giant_com_ratio']=giant_com_ratio\n\nNetwork_Features['token'] =  'Euler'\n#Network_Features\n\nNetwork_Features.to_csv('Euler_Network_Features.csv')\n\n\nConstruct continuous core-periphery structure\n\n# @title Borgatti-Everett Algorithm\n\nedf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][63]]\nG = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n\nalg = cpnet.BE()\nalg.detect(G)\nc = alg.get_pair_id()\nx = alg.get_coreness()  # Get the coreness of nodes\n\n##coreness = pd.DataFrame.from_dict(x, orient='index', columns=['Coreness'])\n##corenessmean = coreness['Coreness'].mean()\n#corenessmean\n\n#sig_c, sig_x, significant, p_values = cpnet.qstest(\n#    c, x, G, alg, significance_level=0.05, num_of_rand_net=100, num_of_thread=16)\n\n#print(significant)\n#print(p_values)\n\npos = nx.spiral_layout(G,scale = 1)\nfig = plt.figure(figsize=(8, 6))\nax = plt.gca()\nax, pos = cpnet.draw(G, c, x, ax, pos = pos)\n\nedf_2 = edf_1[['from_address', 'to_address', 'value']]\n#edf_2.tail()\nresult = edf_2.dtypes\n#print(result)\nseller = edf_2.from_address.unique()\nbuyer = edf_2.to_address.unique()\n\n\n\n\n\n# @title Kojaku-Masuda Algrithm basic\n\nkmconfig = cpnet.KM_config()\nkmconfig.detect(G)\n\nc = kmconfig.get_pair_id()\nx = kmconfig.get_coreness()\n\nfig = plt.figure(figsize=(8, 6))\nax = plt.gca()\nax, _ = cpnet.draw(G, c, x, ax, pos=pos)\n\n\n\n\n\n# @title Kojaku-Masuda Algorithm Search for Short Comings\n\nedf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][63]] #64 was 90. Change later\nG = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of mean&std of coreness (continuous structure)\nalg = cpnet.KM_ER()\nalg.detect(G)\nc = alg.get_pair_id()\nx = alg.get_coreness()  # Get the coreness of nodes\n\n#coreness = pd.DataFrame.from_dict(x, orient='index', columns=['Coreness'])\n#corenessmean = coreness['Coreness'].mean()\n#corenessstd = coreness['Coreness'].std()\n#print ('mean', corenessmean)\n#print ('std', corenessstd)\n\nsig_c, sig_x, significant, p_values = cpnet.qstest(\n    c, x, G, alg, significance_level=0.05, num_of_rand_net=100, num_of_thread=20)\n\npos = nx.spiral_layout(G,scale = 1)\nfig = plt.figure(figsize=(10, 10))\nax = plt.gca()\ndraw_nodes_kwd = {\"node_size\": 80, \"linewidths\": 0.8}\nax, pos = cpnet.utils.draw(G, sig_c, sig_x, ax, draw_nodes_kwd=draw_nodes_kwd)\n\n/usr/local/lib/python3.10/dist-packages/cpnet/qstest.py:94: UserWarning: 'num_of_thread keyword' is duplicated due to a compatibility issue with numba. Only one CPU will be used.\n  warnings.warn(\"'num_of_thread keyword' is duplicated due to a compatibility issue with numba. Only one CPU will be used.\")\n100%|██████████| 100/100 [00:00&lt;00:00, 191.44it/s]\n\n\n\n\n\n\n# @title Kojaku-Masuda Algorithm with lower significance level\n\nsig_c, sig_x, significant, p_values = cpnet.qstest(\n    c, x, G, kmconfig, significance_level=0.01, num_of_thread=1)\n\n# Visualization\nfig = plt.figure(figsize=(8, 8))\nax = plt.gca()\nax, pos = cpnet.draw(G, sig_c, sig_x, ax, pos=pos)\n\n/usr/local/lib/python3.10/dist-packages/cpnet/qstest.py:94: UserWarning: 'num_of_thread keyword' is duplicated due to a compatibility issue with numba. Only one CPU will be used.\n  warnings.warn(\"'num_of_thread keyword' is duplicated due to a compatibility issue with numba. Only one CPU will be used.\")\n100%|██████████| 100/100 [00:00&lt;00:00, 164.93it/s]\n\n\n\n\n\n\n# @title Minres Algorithm\n\nedf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][63]] #64 was 90. Change later\nG = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of mean&std of coreness (continuous structure)\nalg = cpnet.MINRES()\nalg.detect(G)\nc = alg.get_pair_id()\nx = alg.get_coreness()  # Get the coreness of nodes\n\n#coreness = pd.DataFrame.from_dict(x, orient='index', columns=['Coreness'])\n#corenessmean = coreness['Coreness'].mean()\n#corenessstd = coreness['Coreness'].std()\n#print ('mean', corenessmean)\n#print ('std', corenessstd)\n\nsig_c, sig_x, significant, p_values = cpnet.qstest(\n    c, x, G, alg, significance_level=0.05, num_of_rand_net=100) #, num_of_thread=20\n\n#print(significant)\n#print(p_values)\n#print(sig_c)\n#print(sig_x)\n\nx = alg.get_coreness()  # Get the coreness of nodes\nc = alg.get_pair_id()  # Get the group membership of nodes\n\npos = nx.spiral_layout(G,scale = 1)\nfig = plt.figure(figsize=(10, 10))\nax = plt.gca()\ndraw_nodes_kwd = {\"node_size\": 80, \"linewidths\": 0.8}\nax, pos = cpnet.utils.draw(G, sig_c, sig_x, ax, draw_nodes_kwd=draw_nodes_kwd)\n\n100%|██████████| 100/100 [00:02&lt;00:00, 41.14it/s]\n\n\n\n\n\n\n# @title Surprise Algorithm\n\nedf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][63]] #64 was 90. Change later\nG = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of mean&std of coreness (continuous structure)\nalg = cpnet.Surprise()\nalg.detect(G)\nc = alg.get_pair_id()\nx = alg.get_coreness()  # Get the coreness of nodes\n\n#coreness = pd.DataFrame.from_dict(x, orient='index', columns=['Coreness'])\n#corenessmean = coreness['Coreness'].mean()\n#corenessstd = coreness['Coreness'].std()\n#print ('mean', corenessmean)\n#print ('std', corenessstd)\n\nsig_c, sig_x, significant, p_values = cpnet.qstest(\n    c, x, G, alg, significance_level=0.05, num_of_rand_net=100) #, num_of_thread=20\n\npos = nx.spiral_layout(G,scale = 1)\nfig = plt.figure(figsize=(10, 10))\nax = plt.gca()\ndraw_nodes_kwd = {\"node_size\": 80, \"linewidths\": 0.8}\nax, pos = cpnet.utils.draw(G, sig_c, sig_x, ax, draw_nodes_kwd=draw_nodes_kwd)\n\n100%|██████████| 100/100 [00:00&lt;00:00, 105.10it/s]\n\n\n\n\n\n\n# @title Rossa Algorithm\n\nedf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][63]] #64 was 90. Change later\nG = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n\n    # Calculation of mean&std of coreness (continuous structure)\nalg = cpnet.Rossa()\nalg.detect(G)\nc = alg.get_pair_id()\nx = alg.get_coreness()  # Get the coreness of nodes\n\n#coreness = pd.DataFrame.from_dict(x, orient='index', columns=['Coreness'])\n#corenessmean = coreness['Coreness'].mean()\n#corenessstd = coreness['Coreness'].std()\n#print ('mean', corenessmean)\n#print ('std', corenessstd)\n\nsig_c, sig_x, significant, p_values = cpnet.qstest(\n    c, x, G, alg, significance_level=0.05, num_of_rand_net=100)  #, num_of_thread=20\n\npos = nx.spiral_layout(G,scale = 1)\nfig = plt.figure(figsize=(10, 10))\nax = plt.gca()\ndraw_nodes_kwd = {\"node_size\": 80, \"linewidths\": 0.8}\nax, pos = cpnet.utils.draw(G, sig_c, sig_x, ax, draw_nodes_kwd=draw_nodes_kwd)\n\n100%|██████████| 100/100 [00:00&lt;00:00, 124.33it/s]\n\n\n\n\n\nThese algorithms are meant to show with proof that we can describe core-periphery structure networks. More cores discorved would leads us to believe there is more a centeraliztion finance for a crypto currency token. More periphery nodes with less cores would lead us to believe the token is more decenteralized.\n##Creation of Tablature for Centralization\n\n# @title Conform Core Addresses by Date Counts\n\ncore_address = []\na = 0\nfor i in range(0,len(edf_time_partition)):\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n    alg = cpnet.BE()\n    alg.detect(G)\n    c = alg.get_pair_id()\n    x = alg.get_coreness()\n\n    coredf = pd.DataFrame.from_dict(x, orient='index',columns=['coreness'])\n    core = coredf[coredf['coreness']==1].index.tolist()\n    core_address.extend(core)\n    a+=1\n    #print(a)\n\ncores = pd.DataFrame(core_address)\ncore_cnt = cores[0].value_counts(ascending=False).reset_index()\n#core_cnt\n\ncore_cnt.to_csv('core_date_cnt.csv')\n\n\n# @title Number of Core Members Each Day\n\ncore_cnt = []\nfor i in range(0,len(edf_time_partition)):\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][i]]\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n    alg = cpnet.BE()\n    alg.detect(G)\n    c = alg.get_pair_id()\n    x = alg.get_coreness()\n\n    coredf = pd.DataFrame.from_dict(x, orient='index',columns=['coreness'])\n    core = coredf[coredf['coreness']==1].index.tolist()\n    cnt = len(core)\n    core_cnt.append(cnt)\n\nprint(\"Minimum for a day is :\",np.min(core_cnt))\nprint(\"Maximum for a day is :\",np.max(core_cnt))\nprint(\"Total for all days is :\",np.sum(core_cnt))\n\nMinimum for a day is : 0\nMaximum for a day is : 12\nTotal for all days is : 183\n\n\n\n# @title Average Number of Neighbors of Cores\n\navg_core_neighbor = []\n\nfor i in range(0,len(edf_time_partition)):\n    edf_1 = edf.loc[edf['timestamp']==edf_time_partition['timestamp'][0]]\n    G = nx.from_pandas_edgelist(edf_1, 'from_address', 'to_address', 'value', nx.Graph())\n    alg = cpnet.BE()\n    alg.detect(G)\n    c = alg.get_pair_id()\n    x = alg.get_coreness()\n\ncoredf = pd.DataFrame.from_dict(x, orient='index',columns=['coreness'])\ncore = coredf[coredf['coreness']==1].index.tolist()\n\nneighbor_cnt = []\nfor i in range (0,len(core)):\n    neighbor = G.degree(core[i])\n    neighbor_cnt.append(neighbor)\n\nneighbor_cnt_mean = mean(neighbor_cnt)\navg_core_neighbor.append(neighbor_cnt_mean)\n\nprint(\"Average Neighbors to Cores\", np.sum(neighbor_cnt_mean))\n\nAverage Neighbors to Cores 1.0\n\n\n\n# @title Network Dynamics\n\nedf_2 = pd.read_csv('Euler_Network_Features.csv')\n\nfig,axes = plt.subplots(3,2)\nplt.style.use('default')\n#plt.style.use('seaborn-pastel')\nax = edf_2[['Components_cnt']].plot(ax = axes[0,0], figsize=(13,10), grid=False, title='Number of components',xlabel=' ')\nax.set_yscale('log')\nedf_2[['giant_com_ratio']].plot(ax = axes[0,1], figsize=(13,7), grid=False, title='Giant component size ratio',xlabel=' ')\nedf_2[['modularity']].plot(ax = axes[1,0], figsize=(13,7), grid=False, title='Modularity',xlabel=' ')\n#edf_2[['relative_degree']].plot(ax = axes[1,0], figsize=(13,10), grid=False, title='Relative degree',xlabel=' ')\nedf_2[['DCstd']].plot(ax = axes[1,1], figsize=(13,7), grid=False, title='Std of Degree Centrality',xlabel=' ')\n#edf_2[['cp_test_pvalue']].plot(ax = axes[2,0], figsize=(13,11), grid=False, title='p-value of cp test',xlabel=' ')\n#edf_2[['core_cnt']].plot(ax = axes[2,1], figsize=(13,11), grid=False, title='number of cores',xlabel=' ')\nedf_2[['Top10 Degree mean ratio']].plot(ax = axes[2,0], figsize=(13,10), grid=False, title='Top10 nodes avg degree / general avg degree',xlabel=' ')\n#edf_2[['giant_com_ratio']].plot(ax = axes[2,1], figsize=(13,10), grid=False, title='Giant component size ratio',xlabel=' ')\n\nplt.subplots_adjust(wspace =0.15, hspace =0.35)\n\n\n\n\n\nBreakdown\nNumber of Components: We expect a smaller number of componenets to indicate a more centralized network. The number of components is fairly random with an exception toward the beginning of the recorded data.\nGiant Component Size Ratio: A larger giant component size ratio indicates a more centralized network. In our data, the giant component ratio starts high (suggesting more centralization early on), then becomes random, similar to the number of components.\nModulatiry: A smaller modularity score suggests a more centralized network. Modularity for the Ether token starts low, but quickly rises, and stays fairly stable past day 15. This indicates a more centralized network in early days that becomes decentralized and stays decentralized after a couple of weeks. However, while the modularity for Euler settles around 0.6, the modularity for the AAVE token (found in the original paper) settles around 0.8 before dropping down to 0.7, a possible indication that AAVE is more decentralized than Euler.\nStandard Deviation of Degree Centrality: A higher standard deviation suggests a more centralized network. Standard deviation for Euler starts high but quickly falls by day five, where is stays steady. Like the modularity scores, this suggests a more centralized network early on that quickly becomes and stays decentralized."
  }
]